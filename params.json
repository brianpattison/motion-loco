{"name":"Motion-Loco","tagline":"Library for RubyMotion that includes Ember.js inspired bindings, computed properties, and observers.","body":"# Coming Soon...\r\n\r\nComplete rewrite is coming soon. Here's a peak at the direction \r\nI'm hoping to go for version 0.4.0:\r\n\r\n```ruby\r\nclass User < Loco::Model\r\n  # Properties with types and defaults\r\n  property :first_name, :string\r\n  property :last_name, :string\r\n  property :login_count, :integer, default: 0\r\n  \r\n  # Computed properties\r\n  property :full_name, lambda {|user|\r\n    \"#{user.get(:first_name)} #{user.get(:last_name)}\"\r\n  }.property(:first_name, :last_name)\r\n  \r\n  # Associations\r\n  belongs_to :group\r\n  has_many :posts, class_name: BlogPost\r\n  \r\n  # Computed properties will be able to \r\n  # observe a chain of properties\r\n  property :post_count, lambda {|user|\r\n    user.posts.length\r\n  }.property(\"posts.length\")\r\n  \r\n  # Computed properties based on changes made\r\n  # to records inside a Loco::RecordArray\r\n  property :published_posts, lambda {|user|\r\n    user.posts.select{|post|\r\n      post.get(:is_published)\r\n    }\r\n  }.property(\"posts.@each.is_published\")\r\nend\r\n\r\n# Everything will use #get and #set so that computed properties\r\n# can be cached and calculated only when required\r\n@user = User.new(first_name: \"Brian\")\r\n@user.get(:first_name)  # \"Brian\"\r\n@user.get(:login_count) # 0\r\n\r\n# Underscore and camelized properties work the same\r\n@user.set(:lastName, \"Pattison\") # \"Pattison\"\r\n\r\n# Chained property getters/setters\r\n@user.get(\"group.name\") # \"The Awesome Group\"\r\n@user.set(\"group.name\", \"The Humble Group\")\r\n\r\n# Properties won't be KVO compliant, but it will\r\n# be easy to create observers for any observable object.\r\n@observer = Loco.observe(@user, :login_count, lambda {|target, key_path, old_value, new_value|\r\n  # Do something when the login_count changes\r\n})\r\n@observer.remove # Remove observer\r\n\r\n# Bindings are just as easy to create\r\n@binding = Loco.bind(@team_label, :text).to(@user, \"team.name\")\r\n# Changes to @user.team or @user.team.is_admin will propagate to @user.is_admin\r\n@binding.remove # Remove binding\r\n\r\n# Shortcuts will also exist for creating bindings\r\n@team_label.text_binding = [@user, \"team.name\"]\r\n# or camelized if you prefer\r\n@team_label.textBinding = [@user, \"team.name\"]\r\n```\r\n\r\n## Saving and Loading Records with Data Adapters\r\n\r\nAnother major overhaul coming here too. Saving and loading records will look something like this:\r\n\r\n```\r\n# Promise all the things!\r\n@user = User.new(first_name: \"Brian\")\r\n@user.save.then(lambda {|user|\r\n  # User is saved!\r\n}, lambda {|user, error|\r\n  # Error saving user\r\n})\r\n\r\n@user = User.find(1)\r\n@user.then(lambda {|user|\r\n  # User is loaded!\r\n}, lambda {|user, error|\r\n  # Error loading user\r\n})\r\n\r\n@posts = @user.posts\r\n@posts.then(lambda {|posts|\r\n  # Posts are loaded!\r\n}, lambda {|posts, error|\r\n  # Error loading posts\r\n})\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}